/* auto-generated by gen_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_ZTEST_TEST_NEW_H
#define Z_INCLUDE_SYSCALLS_ZTEST_TEST_NEW_H


#include <zephyr/tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <syscall_list.h>
#include <zephyr/syscall.h>

#include <zephyr/linker/sections.h>


#ifdef __cplusplus
extern "C" {
#endif

extern int z_impl_ztest_run_test_suites(const void * state);

__pinned_func
static inline int ztest_run_test_suites(const void * state)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const void * val; } parm0 = { .val = state };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_ZTEST_RUN_TEST_SUITES);
	}
#endif
	compiler_barrier();
	return z_impl_ztest_run_test_suites(state);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define ztest_run_test_suites(state) ({ 	int retval; 	sys_port_trace_syscall_enter(K_SYSCALL_ZTEST_RUN_TEST_SUITES, ztest_run_test_suites, state); 	retval = ztest_run_test_suites(state); 	sys_port_trace_syscall_exit(K_SYSCALL_ZTEST_RUN_TEST_SUITES, ztest_run_test_suites, state, retval); 	retval; })
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
