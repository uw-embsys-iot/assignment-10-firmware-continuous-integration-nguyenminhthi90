/* auto-generated by gen_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_ZTEST_TEST_H
#define Z_INCLUDE_SYSCALLS_ZTEST_TEST_H


#include <zephyr/tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <syscall_list.h>
#include <zephyr/syscall.h>

#include <zephyr/linker/sections.h>


#ifdef __cplusplus
extern "C" {
#endif

extern void z_impl_z_test_1cpu_start(void);

__pinned_func
static inline void z_test_1cpu_start(void)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		(void) arch_syscall_invoke0(K_SYSCALL_Z_TEST_1CPU_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_test_1cpu_start();
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define z_test_1cpu_start() do { 	sys_port_trace_syscall_enter(K_SYSCALL_Z_TEST_1CPU_START, z_test_1cpu_start); 	z_test_1cpu_start(); 	sys_port_trace_syscall_exit(K_SYSCALL_Z_TEST_1CPU_START, z_test_1cpu_start); } while(false)
#endif
#endif


extern void z_impl_z_test_1cpu_stop(void);

__pinned_func
static inline void z_test_1cpu_stop(void)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		(void) arch_syscall_invoke0(K_SYSCALL_Z_TEST_1CPU_STOP);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_test_1cpu_stop();
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define z_test_1cpu_stop() do { 	sys_port_trace_syscall_enter(K_SYSCALL_Z_TEST_1CPU_STOP, z_test_1cpu_stop); 	z_test_1cpu_stop(); 	sys_port_trace_syscall_exit(K_SYSCALL_Z_TEST_1CPU_STOP, z_test_1cpu_stop); } while(false)
#endif
#endif


extern void z_impl_sys_clock_tick_set(uint64_t tick);

__pinned_func
static inline void sys_clock_tick_set(uint64_t tick)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { struct { uintptr_t lo, hi; } split; uint64_t val; } parm0 = { .val = tick };
		(void) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_SYS_CLOCK_TICK_SET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_sys_clock_tick_set(tick);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define sys_clock_tick_set(tick) do { 	sys_port_trace_syscall_enter(K_SYSCALL_SYS_CLOCK_TICK_SET, sys_clock_tick_set, tick); 	sys_clock_tick_set(tick); 	sys_port_trace_syscall_exit(K_SYSCALL_SYS_CLOCK_TICK_SET, sys_clock_tick_set, tick); } while(false)
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
